version: '3.8'

services:
  database:
    container_name: database
    image: postgres:16
    restart: always
    expose:
      - 5432
    ports:
      - 5432:5432
    command: -p 5432
    environment:
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_DB=edtech_club'
      - 'POSTGRES_PASSWORD=1234'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - database_postgres:/var/lib/postgresql/data
    networks:
      - fullstack

  backend:
    image: 'tarinskaya/backend:latest'
    build:
      context: docker
    restart: on-failure
    depends_on:
      - database
    ports:
      - 8099:8099
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.datasource.url"  : "jdbc:postgresql://database:5432/edtech_club",
              "spring.datasource.username" : "postgres",
              "spring.datasource.password" : "1234",
              "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
              "spring.jpa.hibernate.ddl-auto" : "update",
              "server.port": "8099",
              "server.address": "0.0.0.0"
            }'
    networks:
      - fullstack

  frontend:
    image: 'tarinskaya/frontend:latest'
    build: docker
    ports:
      - 3000:3000
    stdin_open: true
    volumes:
      - .:/app
      - /app/node_modules
    command: [ "npm", "start"]

volumes:
  api:
  database_postgres:

# Networks to be created to facilitate communication between containers
networks:
  fullstack: